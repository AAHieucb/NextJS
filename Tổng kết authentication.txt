## Các loại authentication



# HMAC (Session-based)
HTTP là giao thức k trạng thái, session là thứ khiến nó có trạng thái chia sẻ giữa client-server.

-> Sign up: 
- user input username/password
Nếu cho input email thì phải xử lý email dot trick.
Cũng phải xác thực email hợp lệ: sinh random userid lưu vào db kèm emailverified false và expirestime -> gửi mail có url chứa userid -> user ấn link trong mail thì call tới server, thoả mãn expires time thì đổi emailverified là true. 
- server check username k bị trùng, hash password, lưu vào db
Hash password phải kèm salt random để 2 password trùng nhau cho kết quả khác nhau, lưu cả salt vào user db.
- server tạo 1 user session, lưu session data vào database
Session có key là sessionId sinh random, value là user data.
- server trả lại sessionId cho người dùng
Coi là signup xong thì đã login luôn rồi.
Session data có thể gửi trong cookies tự lưu ở client hoặc gửi trong response để user lưu localStorage ok. Nếu dùng cookie thì expiresTime của cookie và expires time của session phải ít nhất là bằng nhau.

-> Sign in: 
- user input username, password
- server check username và hashed password có trong database
- server trả lại sessionId nếu có hoặc tạo session mới cho người dùng nếu chưa có hoặc hết hạn

-> Request:
- user gửi request kèm sessionId
- server check session data trong request hợp lệ với session data trong db
Server check sessionId có trong db chưa hết hạn và đúng user là được.
Session và cookie tự được nới expires time mỗi khi request nếu sắp hết hạn, đảm bảo có auto login.

-> Note: 
- Nên dùng email cho các tính năng reset password hoặc gửi notification. Reset password cũng có thể show ở FE rồi gửi lại server cũng được mà k cần mail.
- Nếu username là email luôn thì buộc phải verify mail mới cho tiếp tục. VD verify mail mà bị hết hạn thì yêu cầu signup lại để gửi lại mail.
Nếu username khác email thì cho phép người dùng sử dụng app trong trạng thái emailverified false được, coi mail độc lập klq tới authen. VD verify mail mà lỗi thì yêu cầu login lại và ấn nút verify thủ công để gửi lại mail.
- Server toàn quyền ngắt session, bắt login lại vì lưu trong db.
- HMAC sinh sessionid gửi lại, cũng có thể an toàn hơn là dùng 1 secret key mã hoá userinfo kèm timestamp dùng làm key gửi lại người dùng.
- Để chống replica attack quá căng, server phải lưu thêm timestamp hoặc nonce vào session data. Sau 1 ktg, server update db session giá trị timestamp mới nhất, gửi lại cho client session mới. Yêu cầu timestamp trong request session phải lớn hơn timestamp trong db session.
- HMAC k cần dùng token. Nói là dùng session nhưng có thể kéo dài vô tận được chứ k chỉ dùng trong 1 lần login. Nếu dùng trong 1 lần login, lưu vào sessionStorage là đủ và k cần logic xóa.
- Phía server có thể lưu session data in-memory, nodejs dùng package exress-session (thay cho cookie-session). 
Có thể lưu vào redis vì nó dạng key value. Vd dùng RedisStore chuyên lưu session data.
VD connect-mongo hỗ trợ lưu session data:
store: new MongoStore ({ 
  url: 'mongodb: // localhost: 27017 / test-app', // URL MONGODB CỦA BẠN 
  ttl: 14 * 24 * 60 * 60, // thời gian hết hạn 1 session
  autoRemove: 'native' 
}), => Đăng nhập vào mongo atlas sẽ thấy session được lưu ở đó
- Khi scale multiple server, buộc lưu session data vào redis hoặc db external để mọi server truy cập có cùng thông tin session của user. Nếu scale nhiều db thì phải replica chúng.
Nếu không phải xử lý routing 1 user luôn tới 1 server.



# Dùng token jwt v1
-> Y hệt HMAC nhưng: 
- Server lưu 1 secret fix cứng random trong .env
- Server encrypt userinfo + timestamp + expiresTime bằng secret và gửi lại client. 
- Ở mỗi request, nếu server decrypt được user và expiresTime hợp lệ là ok. Timestamp để chống replica attack nếu cần thôi
- Có thể sinh cả refreshToken có hạn lớn để lấy accessToken khi hết hạn.
- Server k cần lưu data ở db hay gì cả mà chỉ cần client lưu token thôi.



# Dùng token jwt v2 dự án lớn chuẩn
Server sẽ k fix cứng secret gì hết mà mỗi user có 1 secret riêng cho từng key lưu trong db.

-> Signup:
- User input username password
- Server check username k bị trùng, hash password, lưu vào db
- Ở đây sinh ra 2 số random key, mỗi số dùng để sign bằng jwt tạo ra accessToken có hạn ngắn hơn refreshToken, payload là userInfo.
Token gồm 3 phần: HEADER(thuật toán).PAYLOAD(userid,role,timestamp,expiration).SIGNATURE(phần mã hoá)
Expiration nhét vào payload chứ k lưu ở FE để người dùng đổi tùy tiện. Payload luôn xem được từ token nên kbh lưu thông tin nhạy cảm vào, chỉ có phần SIGNATURE là k thể giải. SIGNATURE là phần bảo mật, nó mã hóa 2 phần header và payload bằng secret key.
- Lưu vào database là user nào gắn với 2 số random key kia 
- Trả lại data kèm accesstoken và refreshtoken

-> Login:
- User input username password
- Server check hased password hợp lệ
- Y hệt signup, sinh 2 key, tạo 2 token, lưu vào db, gửi lại client.

-> Request:
- User input accesstoken + userid
- Lấy random key trong db từ userid
- Giải mã accessToken bằng jwt và random key, lấy ra payload chứa userInfo, ss trùng với userId là ok.
Nếu client gửi kèm refreshToken thì ta làm mới cả accessToken và refreshToken luôn, random key giữ nguyên nhưng gửi lại 2 key mới cho user thôi.

-> Logout:
- Server xoá 2 random secret key khỏi db, đảm bảo mọi token bị loại bỏ vì key để giải mã đã mất.

-> Note: 
- Mặc định jwt dùng HS256 là thuật toán dùng 1 secret key fix cứng để mã hoá thành 1 token. Ở đây ta tạo ra 2 secret key riêng cho từng user để mã hoá thành accesstoken và refreshtoken.
Cách khác là sinh ra cặp key public và private bằng rsa cho jwt dùng thuật toán RS256, cả accessToken và refreshToken được sign bằng public key và verify bằng private key. Cách này vẫn phải bảo vệ cả 2 key vì 1 key dùng cho sign, 1 key cho verify. Nhưng tốt hơn trong hệ thống phân tán khi 1 server sign, nhiều server verify được.
=> ref tới "ECommerce"

- JWT cũng dùng khi quá trình verify client server mất nhiều tg thì chỉ cho làm 1 lần rồi sau đó trao đổi qua lại an toàn với jwt cho nhanh. VD: ký message web3 rồi dùng jwt để giao tiếp.

- Dùng redis vô hiệu hoá token: VD hệ thống bị hack yêu cầu admin vô hiệu hóa 1 refresh token, hoặc user logout và cần vô hiệu hóa token vừa logout.
Giải pháp là lưu token vào redis dạng whitelist và check thêm 1 bước, nếu token k tồn tại trong redis thì login failed. Thực tế việc lưu whitelist k ổn vì phải lưu rất nhiều, lưu blacklist ok hơn vì chỉ khi logout mới cần lưu lại.

***Nguyên tắc bảo mật là k được lưu token của user vào bất cứ đâu trong BE để đảm bảo an toàn, có 2 cách:
C1: hash token 1 chiều r lưu bản hashed lại
C2: thêm vào payload của token 1 uuid random gọi là jit và lưu trường đó vào redis thôi. Khi check thì lấy ra trường random ss với redis là được => nên dùng

Nếu user logout 1 thiết bị, sẽ chỉ token đó hết hạn, các thiết bị khác vẫn dùng bth. Nếu ta lưu redis (userid, [blacklist]) rất tệ vì token hết hạn sẽ k tự xóa khỏi blacklist. Có 2 cách:
C1: Dùng fingerprintjs luôn cho ra 1 unique id khi 1 tk được login trên 1 loại browser trên 1 máy. Nó chỉ đổi nếu có update qtr thôi.
Sau đó lưu redis (userid_deviceid, <jit của token trên thiết bị đó>) => bỏ vì phụ thuộc vào fingerprintjs
C2: Vì ta muốn check token nhanh và tự xóa theo expireTime nên mỗi token nên là 1 key riêng trong redis, ta lưu: (`TOKEN_BLACK_LIST_${userid}_{token_jit}`, true); 
=> Lưu ý ta vẫn lưu userid vào key blacklist để làm nhiều tính năng như: đổi password ở 1 thiết bị thì tất cả thiết bị của user đó đều phải vô hiệu hóa token.

- Bài toán: ứng dụng cập nhật có tính năng mới, chỉ ai có accesstoken mới mới dùng được, mọi accesstoken cũ cần bị hủy, tức buộc người dùng phải đăng nhập lại.
C1: Kể từ lúc cập nhật, mọi request của người dùng lên server lần đầu đều báo lỗi token k hợp lệ, yêu cầu login lại và lưu vào blacklist. Bất cứ ai chưa có trong blacklist đều báo k hợp lệ => K ổn nếu người dùng đăng nhập trên nhiều thiết bị và có nhiều token thì cái này chỉ báo có 1 lần là sai, các thiết bị khác sẽ pass cái blacklist => bỏ
C2: Thay đổi cấu trúc token. 
Lưu version vào payload. VD ban đầu là {id, email} thì thêm thành {id, email, version}. Mỗi request ngoài check expiretime, check thêm version phải trùng với version của hệ thống. Version hệ thống có thể lưu trong env or từng user database. Khi update thì tăng version lên, accesstoken mới tạo ra cũng tăng version lên là được
Ta có thể custom chỉ update với list user xác định. Vd lưu vào user database thì đổi version của user nào sẽ chỉ hủy accessToken của user đó => Cũng có thể thêm tùy ý trường type vào payload để chỉ định áp dụng với user có type là gì

- Xây dựng hệ thống tự phát hiện token bị hacker cướp: mặc định xét 1 user có thể nhiều token vì login từ nhiều thiết bị.
Mỗi khi có login từ 1 thiết bị mới, gửi mail thông báo cho user về ip và location của thiết bị đó, để họ tự xác thực.
Chủ động bắt hacker trong ứng dụng yêu cầu bảo mật cao: Khi AT hay RT bị hết hạn, hoặc khi RT lên server để làm mới AT, FE nên gửi cả 2 giá trị để server lưu redis (`TOKEN_BLACK_LIST_${jit}`, 1) với expire times 1 thời gian. Nếu 1 request mà dùng lại AT và RT này thì khả năng cao là token đã bị hack, server sẽ vô hiệu hoá mọi token của user vào blacklist luôn và gửi mail thông báo. 



# OAuth1.0 SAML và OpenId Connect => bỏ
-> Luồng hoạt động của OAuth 1.0 cho ứng dụng web 
- Web (Consumer) đk với nhà cung cấp dịch vụ (VD: Twitter) để nhận Consumer Key và Consumer Secret.
- Web gửi yêu cầu lấy Request Token đến nhà cung cấp dịch vụ. Nó chứa CallbackURL là nơi nhận phản hồi sau khi uỷ quyền, yêu cầu cũng được ký số bằng Consumer Secret.
Web chuyển hướng người dùng đến trang ủy quyền của nhà cung cấp dịch vụ và để login và đồng ý cấp quyền truy cập cho web.
Nhà cung cấp dịch vụ sẽ trả về callback url oauth_token (Request Token), oauth_token_secret (bí mật liên quan đến token) tới callbackurl.
- Web gửi Request Token đã được ủy quyền đến nhà cung cấp dịch vụ để đổi lấy Access Token. Yêu cầu này cũng phải được ký số.
- Web dùng Access Token để truy cập tài nguyên từ nhà cung cấp dịch vụ. Mỗi request đều phải được ký số bằng Consumer Secret và oauth_token_secret
=> Bất tiện vì luôn phải ký số mọi request. K cần https luôn vì ký số luôn an toàn.

-> SAML: Security Assertion Markup Language là chuẩn cũ cung cả authentication và authorization, có SAML 2.0

-> OpenId Connect là chuẩn để authentication. 
VD Google là 1 OpenID identity provider cung cho 1 người thì người này có thể login bất cứ website nào chấp nhận xác thực bằng OpenID như Youtube, Okta, Facebook.
VD có thể dùng firebase tạo OpenID connect với google cho website được rất tiện lợi.
Phiên bản mới nhất của OpenID là OpenID Connect, nó kết hợp OpenID authentication và OAuth2 authorization để vừa xác thực vừa ủy quyền.



# OAuth2.0
Là chuẩn để authorization, không phải chuẩn để authentication như OpenId Connect. 
Vd OAuth2 chia quyền token dùng được các data nào: Alice vào NewsApp và có tính năng tùy chọn xem ai là bạn bè cũng dùng NewsApp để kết nối với họ. Alice chọn login bằng facebook và được hỏi có muốn chia sẻ list bạn trên Facebook với NewsApp không. Nếu chọn có sẽ điều hướng trở lại NewsApp với 1 token, NewsApp dùng token này để lấy list friends. 
Tuy nhiên hầu hết ứng dụng chỉ dùng OAuth để login chứng minh là có tk chứ k tương tác hẳn với data của github, gmail hay google làm gì. Do đó họ coi việc ủy quyền read thông tin cơ bản của user cũng là 1 hình thức xác thực chứng minh đã có tk, nên dùng OAuth2 login ok.

-> Login bằng Authorization Code Flow:
- User ấn login bằng discord
- Server tạo ra 1 url và redirect user đến sign in của provider
Phải tạo 1 application trong nền tảng đó, lưu lại clientid và clientsecret.
URL để redirect là base authentication url `/authorize?client_id=${clientid}&redirect_uri=${redirectUrl}&response_type=code&scope=${scope}` => redirectUrl là url provider gửi code về server của ta sau khi login, scope là quyền ngăn cách bằng dấu cách, scope phải tra trong docs quyền tối thiểu để lấy được user.
redirectUrl của server phải được thêm vào trong application của provider.
Dùng cookie state để tránh giả mạo provider: tạo random state 64bytes hex lưu vào cookie (sameSite lax để provider lấy được) và thêm vào authentication url `?state=${state}`
Dùng code verifier để tránh giả mạo server: tạo random state 64bytes hex lưu vào cookie sameSite lax, codeVerifier phải mã hóa giá trị đó với sha256 trả về dạng base64, và thêm vào url `?code_challenge=${code_verifier}&code_challenge_method=S256`
- Tạo route là GET redirectUrl trên server nhận về code, fetch token, fetch user.
Check cookie state hợp lệ trước khi fetch token: sẽ nhận về cả code cùng với state, check state nhận về trùng với state trong cookie là được. Nếu sai phải redirect về trang lỗi
Url để fetch token là "/token" dùng x-wwww-form-urlencoded, body gồm: code (nhận về), redirect_uri(url hiẹn tại), grant_type "authorization_code", client_id, client_secret. Trả về nhiều thứ nhưng chỉ cần quan tâm access_token và token_type.
Nếu dùng code verifier phải gửi vào "/token" kèm code_verifier từ cookie, provider server sẽ nhận và xác thực vì chỉ server của ta gửi cookie mới có code_verifier đó.
Dùng để fetch user data, request có header là `{token_type} {access_token}`. Trả về thông tin user chắc chắn có id và email ở mọi loại OAuth.
Do ta k có nhu cầu thao tác với nền tảng github lâu dài nên k cần lưu accesstoken hay refreshtoken mà chỉ fetch user là xong. Nếu thực sự muốn tương tác phải lưu lại và chỉnh scope đủ quyền để làm mọi thứ.
- Lưu user vào db kèm provider.
1 user có thể login bằng nhiều cách nhưng cách nào thì vẫn chỉ là 1 user đó.
Bên cạnh bảng user lưu thông tin user, còn phải lưu 1 bảng khác: userId, providerAccountId, providerName
- Tạo user session.
Bản chất khi login OAuth chỉ để xác thực rằng họ có tài khoản đó, lấy được thông tin của user, chứ thực tế user vẫn phải tương tác với hệ thống của ta nên vẫn phải dùng session hoặc jwt token do server ta tạo ra. Login OAuth đã thay thế việc nhập mk rồi check hashedPassword của user thôi.
Có thể lưu tiếp vào redis (random session id, user) và set vào cookie cho user trùng expires times, r redirect user về trang chủ. Cookie toàn bộ qtr sẽ gửi qua cả provider và client browser luôn, redirectUrl cũng hiện ở browser.

-> Logout: 
- Khi jwt token ta cung cho user hết hạn, hoặc khi session hết hạn, hoặc chủ động ấn logout thì phải xóa hết session và token và login lại.
- Nếu cần tương tác OAuth thì có thể lưu lại accessToken và refreshToken tùy ý quản lý. Logout phải xóa cả 2 token đi.
- Về bảo mật: 
Mã code nhận về trong redirectUrl có thể k an toàn chỉ dùng 1 lần, sau khi dùng để sinh accesstoken thì code cũng hết giá trị.
Khi lấy token cần clientSecret vì nếu lộ code, hacker kb clientSecret sẽ k lấy được token.
- Bản chất cho appA dùng data của appB mà k cần phải input mật khẩu appB vào appA, mà appA chỉ cần implement flow trên là đươc.



# 2FA
Mỗi lần login sau 1 ktg thì nhập 1 mã gửi về từ gmail, sms, authenticator application.



# SSO hệ thống lớn
SSO có thể dùng token riêng để xác thực trong hệ thống, kết hợp với OAuth2.0 để cho các bên khác dùng data của mình.
Có thể kết hợp với OAuth2.0 và SSO jwt.
Với hệ thống nhỏ, khi mở rộng domainX sang domainY sao cho user login X thì tự login được Y thì bị chặn bởi browser theo same-origin policy.
Do đó họ buộc phải thêm 1 central identity server riêng quản lý token các ứng dụng con. Sau khi login identity server, có thể truy cập được mọi ứng dụng trong hệ thống bằng token lấy từ identity server. Khi vào bất cứ domain nào mà chưa login cũng đều redirect đến identity server.
Cơ chế nó quản lý user authen trong 1 single database cho mọi ứng dụng con chứ kp mỗi ứng dụng con là 1 database authen, phải phân quyền user để vào được hệ thống con.

VD: Google là 1 SSO. Login vào gg xong là có accesstoken vào các server con, vì mỗi app có 1 resource server riêng như Google Resource Server của gmail, calendar. 
Khi user login vào google với OAuth2.0 nhận về token sẽ có thể query data từ mọi Resource Server theo quyền hạn của mình.



# Authorization
-> Dự án đơn giản thì lưu user kèm role. Mọi chỗ check role là gì thì được quyền làm gì.

-> Dự án lớn dùng RBAC: khi chia role, admin, user, groups
- Có bảng user và group. Khi 1 group được gán permission thì user trong group đó cũng có permission tương ứng.
- Bảng permission lưu quyền và phạm resource được phép tác động
Mỗi action thực hiện đều gắn với 1 permission là 1 số cụ thể.
- Bảng role lưu các roles "admin", "user", "staff"
Bảng này có thể k cần thiết mà gán trực tiếp quyền cho user group luôn cũng được
- Sau đó ta chỉ cần set, user gắn với role nào, role nào thì gắn với permission nào.



# VD OAuth2 google truy cập gmail api
Doc URL setup production: https://developers.google.com/gmail/api/auth/scopes
Doc viết api: https://developers.google.com/gmail/api/reference/rest/v1/users.messages/get

Setup: 
- Vào https://console.cloud.google.com/
- Tạo 1 project mới nếu chưa có
- Search Gmail API và Enable nó. Thực tế có nhiều loại API và ở đây ta đang chỉ dùng dịch vụ Gmail.
- Setup từng bước
Phần url phải ủy quyền localhost:5000 chẳng hạn nếu cho phép app chạy ở local như v
Phần scope là các mức độ mà ta muốn app truy cập. VD chọn https://mail.google.com/ sẽ có full access như gửi mail nhưng k có nghĩa là có mọi thứ. VD muốn xem các email gửi thì phải thêm scope https://www.googleapis.com/auth/gmail.readonly
- App chạy được trong 2 môi trường là testing và production. Đổi môi trường trong OAuth consent screen. 

-> Gmail API có 3 loại scope:
Recommended là scope cơ bản nhất bất cứ ai cũng ok
Sensitive và Restricted là 2 scope truy cập data quan trọng cần sự đồng ý của người dùng. Và developer cũng phải cho app đi qua Google Verification Process mới dùng được 2 loại scope này. Google Verification Process phải trả phí hàng tháng và phải quay video cam kết sẽ dùng thông tin nhạy cảm của user để làm gì.

-> Tương tự có thể tạo ứng dụng nhúng video youtube dạng mp3 qua YoutubeAPI: Có thể nhúng 1 video youtube bất kỳ vào web dạng video nhét vào src, phát nhạc, tua bài, tìm kiếm bài hát, lấy thumbnail. 
Phải đăng ký project tương tự trong google cloud platform và enable youtubeAPI (thay vì gmail api bên trên) và tạo 1 api key mới là được, k cần config gì thêm.


