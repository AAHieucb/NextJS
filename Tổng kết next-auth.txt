# Dùng next-auth 
=> Nếu tự sign in username password, nên tự implement bằng nextjs thuần

-> const {
  update 
} = useSession({
  required: true,
  onUnauthenticated(){}, => xử lý thêm gì khác khi chưa login 
});

--> required: true => trang nào dùng sẽ popup buộc login trước mới cho xem, status sẽ thành chỉ có 2 giá trị là loading và authenticated
VD tạo common thì component nào muốn chỉ cần gán auth=true:
export default function AdminDashboard() {
  const { data: session } = useSession()
  return "Some super secret dashboard"
}
AdminDashboard.auth = true;
export default function App({ Component, pageProps: { session, ...pageProps } }) {
  return (
    <SessionProvider session={session}>
      {Component.auth ? (
        <Auth>
          <Component {...pageProps} />
        </Auth>
      ) : (
        <Component {...pageProps} />
      )}
    </SessionProvider>
  )
}
function Auth({ children }) {
  const { status } = useSession({ required: true })
  if (status === "loading") {
    return <div>Loading...</div>
  }
  return children;
}

--> update({trường đổi}) từ useSession giúp update session gọi từ client sang server trực tiếp. Còn update() thì sẽ reload lại session ở server luôn, VD khi đổi db cần update session or refetch định kỳ.
Có thể check trong hàm callbacks jwt và session if(trigger === "update") để server biết khi nào hàm được gọi vì chủ động call hàm update()

-> getSession lấy ở client, ở server dùng getServerSession. 
Để xác thực authen ở các api route khác phải dùng getServerSession để check user đã login => getServerSession sẽ lấy session từ cookie về giải mã và xác thực còn hạn, truy cập db để lấy session nếu cần thiết, tự gọi decode của jwt, nếu token từ ngoài mới cần thủ công verify. URL: https://next-auth.js.org/configuration/nextjs
Cách khác là dùng middlware check ngay từ trước
Dùng getServerSession từng page chưa ổn vì fetch data ở phạm vi từng component, nếu tái sử dụng component ở pages khác sẽ phải thêm getServerSession vào pages đó. Recommend là nên tạo 1 data access layer "server-only" check token và call api trong 1 hàm đó thôi, r đem tái sử dụng ở mọi nơi ok. Nên bao lại với cache chống deduplicate nữa

getCsrfToken lấy csrf token bất cứ lúc nào. next-auth tự sinh 1 csrf token có thể lấy luôn ở cả 2 phía mà k cần cài package generate csrf token ở server nx.
getProviders() lấy provider và các trường truyền vào

-> signOut({ 
  callbackUrl: 'http://localhost:3000/foo' // vẫn redirect sang page này sau khi signOut
  redirect: false // Nhưng k reload page
}); 

-> <SessionProvider
  basePath="/" // Phải định nghĩa basePath nếu custom basePath, mặc định là "/", thực tế nó sẽ nối vào canonical url NEXTAUTH_URL trong env var
  refetchInterval={5 * 60} // Re-fetch session every 5 minutes
  refetchOnWindowFocus={true} // Re-fetches session when window is focused
>

-> signIn("email", { email }) => dùng email sign-in flow là flow yêu cầu người dùng xác thực link gửi về input mail để login

-> const authOptions = {
  providers: [
    GoogleProvider({
      clientId: process.env.CLIENT_ID ?? "",
      clientSecret: process.env.CLIENT_SECRET ?? "",
      authorization: {
        params: {
          prompt: "consent", // Forces the consent screen, buộc phải login và cấp quyền lại dù đã login trước đó rồi, có nó sẽ k có tính năng auto login
          access_type: "offline", // Phải có mới request trả về refresh token
          response_type: "code", // Buộc là code trong OAuth2.0, gg trả về code r dùng đổi lấy token
        },
      },
    }),
    GithubProvider({ => github k hỗ trợ refresh token như gg
      clientId: "test1",
      clientSecret: "test2",
    }),
    CredentialsProvider({ // Custom login k dùng bên thứ 3
      id: "domain-login",
      name: "Domain Account", // Sign in with ...
      credentials: { // Các trường input
        username: { label: "Username", type: "text", placeholder: "jsmith", value: "TEST" },
        password: { label: "Password", type: "password" }
      },
      async authorize(credentials, req) { // Hàm được gọi khi login để lấy user
        return user; // giá trị trả về lưu vào trường user mà về sau lấy ra trong hàm jwt. return null sẽ báo lỗi user check lại detail, Reject sẽ sang trang error
      },
    }),
  ],
  callbacks: {
    redirect({ url, baseUrl } => { => Gọi khi nào user redirect to callback url, Vd signIn, signOut
      return baseUrl;
    }),
    async jwt({ token, user, account, profile, isNewUser }) { => Gọi khi tương tác với JWT VD tạo, cập nhật, login, làm mới, khi client truy cập session cũng gọi
      // user, account, profile, isNewUser chỉ có khi login lần đầu tiên tạo session mới. Các request sau đó cũng gọi nhưng chỉ truy cập được token thôi
      // Thường dùng để lưu lại access token vào next-auth session data sau khi login. Nó tuỳ vào provider. VD login gg thì account sẽ chứa token, login CredentialProviders thì có thể nhét token vào user trong hàm authorize sẽ truyền tiếp xuống user đây
      if (account) {
        token.accessToken = account.access_token;
        token.refreshToken = account.refresh_token;
      }
      // Có thể xử lý token expires thì làm mới bằng refresh token
      return token; => giá trị returned được encrypted
    },
    async signIn({ user, account, profile, email, credentials }) { => Gọi khi login, dùng EmailProvider thì lúc verify link trong mail cũng gọi
      // Dùng EmailProvider thì email.verificationRequest = true ở lần đầu click login, khi verify trong mail thì trường này k còn nữa
      // Dùng CredentialProvider thì user passed từ hàm authorize, profile là raw body của http post
      return true; // Có thể thêm or update vào db, thay đổi login info trước khi tạo session mới
    },
    async session({ session, user, token }:) { => Gọi khi tương tác session, VD login, gọi getSession(), useSession(), call vào /api/auth/session.
      // Dùng db thì user được pass. Dùng jwt thì token được pass từ hàm jwt trên, gọi sau jwt() để lấy token mà
      return session;
    },
  },
  secret: process.env.NEXTAUTH_SECRET, => Buộc có trong production để encrypted JWT or hash mail tự động bởi next-auth, sinh với: openssl rand -base64 32
  session: {
    strategy: "jwt", 
    maxAge: 30 * 24 * 60 * 60, // 30 days nữa thì session expires.
    updateAge: 24 * 60 * 60,
    generateSessionToken: () => { => session thường là random UUID
      return randomUUID?.() ?? randomBytes(32).toString("hex")
    }
  },
  jwt: { // Chỉ có tác dụng khi strategy "jwt"
    maxAge: 60 * 60 * 24 * 30, // maxAge của jwt token
    async encode({ token, secret, maxAge }) { // mặc định tự encrypt và decrypt nhưng có thể tự custom nếu thích
      return "" => trả custom encoded JWT string
    },
    async decode({ token, secret }) {
      return {} // trả jwt object, null nếu failed to decode
    },
  },
  events: { => thường dùng cho log, trường trong message: https://next-auth.js.org/configuration/events
    async signIn(message) { /* on successful sign in */ },
    async signOut(message) { /* on signout */ },
    async createUser(message) { /* user created */ },
    async updateUser(message) { /* user updated - e.g. their email was verified */ },
    async linkAccount(message) { /* account (e.g. Twitter) linked to a user */ },
    async session(message) { /* session is active */ },
  },
  logger: { => intercept log có sẵn của next-auth, default nó log trên console
    error(code, metadata) { },
    warn(code) { },
    debug(code, metadata) { }
  },
  theme: { => custom page theme
    colorScheme: "auto", // "auto" | "dark" | "light"
    brandColor: "", // Hex color code
    logo: "", // Absolute URL to image
    buttonText: "" // Hex color code
  },
  cookies: { => các loại token đều tự có và tự dùng trong next-auth khi cần thiết, ta có thể kiểm soát cách nó lưu trong cookie. 
    sessionToken: { => kiểm soát cách sessionToken lưu trong cookie
      name: `__Secure-next-auth.session-token`,
      ...
    },
    callbackUrl: { => cookie lưu url mà người dùng chuyển hướng tới sau khi signIn
      name: `__Secure-next-auth.callback-url`,
      ...
    },
    csrfToken: { => kiểm soát cách csrfToken lưu trong cookie
      name: `__Host-next-auth.csrf-token`,
      ...
    },
    pkceCodeVerifier: { => cookie lưu PKCE - 1 cơ chế tăng cường bảo mật cho OAuth2.0
      name: `${cookiePrefix}next-auth.pkce.code_verifier`,
      options: {
        httpOnly: true,
        sameSite: 'lax',
        path: '/',
        secure: true,
        maxAge: 900
      }
    },
    state: { => lưu trong cookie là 1 token bảo mật, gửi cho provider rồi provider gửi lại để đảm bảo request k bị giả mạo
      name: `${cookiePrefix}next-auth.state`,
      ...
    },
    nonce: { => có sẵn trong next-auth và được lưu trong cookie để cản replay attack
      name: `${cookiePrefix}next-auth.nonce`,
      ...
    },
  },
  pages: { => custom page cho các chức năng. URL: https://next-auth.js.org/configuration/pages
    signIn: '/auth/signin',
    signOut: '/auth/signout',
    error: '/auth/error', => khi có error code pass vào query string
    verifyRequest: '/auth/verify-request', => verify mail
    newUser: '/auth/new-user', => new user first sign-in
  }
}
export default async function auth(req, res) { // Thực hiện cho mọi request trước khi pass vào NextAuth
  if(req.query.nextauth.includes("callback") && req.method === "POST") {
    console.log("Handling callback request from my Identity Provider", req.body);
  }
  const someCookie = req.cookies["some-custom-cookie"];
  return await NextAuth(req, res, {
    ...
    callbacks: {
      session({ session, token }) {
        session.someCookie = someCookie
        return session
      }
    }
  })
}

--> session.strategy default là "jwt" lưu encrypted jwt trong session cookies. Nếu dùng adapter tự default là "database" và session cookies sẽ chứa sessionToken là giá trị để query session data từ db.
--> session.updateAge: sau bao lâu nữa sẽ update session hiện tại vào db khi session data đổi. Set 0 thì cứ có thay đổi là update luôn sẽ tốn.
Nếu dùng jwt sẽ ignore trường này, vì jwt chỉ cần lưu data trong session cookies, k cần dùng database luôn dù ta có thể force dùng db.

-> Nó cung hàm để lấy token ở bất cứ đâu phía server, dùng ở mọi api route:
import { getToken } from "next-auth/jwt";
export default async function handler(req, res) {
  const token = await getToken({ => hàm này cũng tự lấy token pass vào header Authorization: 'Bearer token'
    req, 
    secret: process.env.NEXTAUTH_SECRET, => Nếu dùng NEXTAUTH_SECRET env thì chỉ cần gọi await getToken({req})
    secureCookie: true,
    cookieName: true, 
    raw: true, => k decode mà trả dạng encrypted raw luôn
  });
  res.end()
} 

--> secureCookie => thêm secure prefix vào tên trường chứa token lưu trong cookie, mặc định tự động false cho dev, true cho production, trừ khi NEXTAUTH_URL chứa tiền tố https thì tự động true hết.
--> cookieName => chỉ định tên của trường chứa token lưu trong cookie, sẽ ignore secureCookie

-> middleware.js của nextjs:
import { withAuth } from "next-auth/middleware"
export { default } from "next-auth/middleware" => mọi route đều yêu cầu login
export const config = { matcher: ["/dashboard/:path*"] } => thêm matcher đảm bảo mọi route đều k cần, chỉ các route trong matcher mới cần
export default withAuth({ 
  pages: {
    signIn: "/login", => setting middlware nếu người dùng vào 1 trang được bảo vệ (set như bên trên) mà chưa login sẽ redirect qua
    error: "/error", => setting nếu lỗi login thì đi vào. setting phải trùng với options NextAuth
  },
  secret: "", => phải trùng với NextAuth config
  callbacks: {
    authorized({ req , token }) { => Để check người dùng được authorized không, hàm này chạy khi middleware bắt được request
     if(token) return true; => default
    }
  },
  jwt: { decode: authOptions.jwt?.decode }, => phải giống với trong authOptions thì import rồi add luôn như này cũng được
})

export default withAuth(
  function middleware(req) {
    console.log(req.nextauth.token);
    console.log(req.nextauth.token?.role);
    console.log(req.nextauth.token?.emailVerified);
    if (userRole !== "admin") {
      return NextResponse.redirect(new URL("/unauthorized", url));
    }
  },
  {
    <options như trên>
  },
)
=> Khi có 2 tham số thì hàm middleware đầu là hàm bth của next js có thể xử lý thêm



# Luồng hoạt động jwt
Khi dùng OAuth Provider, k cần lo về việc login. Khi dùng CredentialsProvider phải tự custom các api để sign up, login.

-> Bản chất các cách login:
- Dùng session data: là 1 cách để client call api tới server mà k cần tạo access token.
Client login sẽ chia sẻ với server cùng 1 session data. Server check session data từ client trùng nhau là valid.
Có nhiều giải pháp để server lưu data như: lưu trong db, lưu trong bộ nhớ, lưu trong cache, sử dụng 1 secret để mã hoá và chỉ cần lưu ở client. 
Ở phía client thì session cookie lưu trong browser, mục cookies có expires time là "Session" là session cookie, nếu expires time cụ thể thì là normal cookie.

Sử dụng 1 secret để mã hoá và chỉ cần lưu ở client là 1 cách rất hay cho server stateless: Client gửi session data tới server, server mã hoá bằng secret và gửi lại client 1 token, client lưu lại token trong cookie, khi có request sẽ gửi lại server decrypt được là được.

- Dùng jwt: là cách thông thường khi mà server sinh access token và refresh token. Server k cần lưu gì cả mà client chỉ lưu vào normal cookie hoặc localStorage.

=> Vấn đề là next-auth gây hiểu nhầm: sử dụng session cookie nhưng thực ra là lưu session ở FE vào normal cookie chứ kp session cookie, đóng browser k bị xoá. next-auth cũng sử dụng strategy jwt nhưng thực tế kp là jwt của OAuth mà chỉ là cách encrypt session data giống cách encrypt jwt token nên đặt tên v thôi.
=> Bản chất next-auth mã hoá session data thành 1 jwt token và lưu lại (chỉ để lưu chứ kp là jwt oath). Token này có hạn là session.maxAge, được lưu vào cookie với tên mặc định là next-auth.session-token với hạn là cookies.sessionToken.options.maxAge. Nên set bằng nhau

1) strategy: "jwt" => session trong useSession ở FE được mã hoá bằng secret và lưu vào normal cookie, server k lưu gì cả. Client gửi session được mã hoá tới server để server decrypt xác thực
2) strategy: "database" => session trong useSession ở FE được lưu vào db và có 1 key, client lưu mỗi key đó trong normal cookie và gửi tới server để lấy từ db mà check.

--> Tức là: Mặc định client có thể call tới server dựa vào việc check session data. Phía server dùng getServerSession là check thoải mái.
Mặc định next-auth k dùng jwt OAuth và k có accesstoken refreshtoken gì cả, nếu muốn thì phải tự thêm. Thực tế chỉ cần dùng nếu call external api, chứ cùng dự án nextjs thì dùng session data là đủ.
Măc định next-auth tự có auto login rồi vì lưu vào normal cookie, ta có thể custom cookies.sessionToken thời gian sống lâu lên là được.

-> 2 flows login ổn nhất
1) Dùng session data như cách next-auth hiện tại: chỉ gọi api cùng dự án; k cần accesstoken, chỉ cần session data check là được; đặt time sống của cookie lâu là có auto login và hết hạn phải login lại.
Config cookies.sessionToken, dùng getServerSession lấy session ra check ở api route
2) Dùng OAuth access token như bth:
- Nếu dùng Provider bên thứ 3 thì có token luôn, tuỳ loại k có refresh token thì tuỳ biến bỏ logic đó đi.
- Dùng CredentialsProvider, lấy user và 2 loại token luôn trong hàm authorize() -> jwt() -> session()
Sửa type interface Session chứa cả 2 loại token
custom jwt() xử lý accesstoken hết hạn thì lấy lại, nếu refreshtoken sắp hết hạn cũng lấy lại. 
Lúc gọi API thì lấy session.token truyền vào header Authorization (chuẩn OAuth) và server lấy ra check. Cách khác là server lấy bằng getServerSession.

--> Vấn đề thời gian hết hạn của session, cookies, access token, refresh token. Expirse times của cookies và session đều tự mở rộng mỗi khi lấy session nên k sợ nó hết hạn trước refresh token nhé, cứ set 1 ktg đủ xa là được.
Logic acccess token hết hạn và làm mới chỉ cần viết trong hàm jwt() là đủ vì getServerAction hay bất cứ khi nào truy cập session đều gọi vào. Trừ khi cần gọi API bên thứ 3 k dùng server của ta thì có thể phải thêm ở client side. 



# Có thể tạo custom adapters connect db, connect supabase cloud, mongodb.
Khi 1 người dùng tk github và google (cùng mail) logins vào hệ thống sẽ hiểu là 1 người khác nhau với 2 ids. Buộc phải can thiệp thủ công quá trình check mail để check merge thành 1 người.



# 3 loại providers
-> OAuth. Vd Tạo google login
Lấy OAuth token có client id và client secret trên Google Console.
Origin và redirect url phải chuẩn. VD Google Console set url origin là http://localhost:3000 và url redirect http://localhost:3000/api/auth/callback/google

-> Email: custom việc gửi về mail đẻ xác thực tk
-> Credentials: login bằng username, password, 2-factor authen ok



# Module Augmentation typescript là pp mở rộng type cho các type có sẵn ở module nào đó.
Vd tạo file types/next-auth.d.ts:
import NextAuth, { DefaultSession } from "next-auth";
declare module "next-auth" {
  interface Session { => Trả ra bởi useSession
    user: {
      address: string
    } & DefaultSession["user"] => extended default type
  }
}



# GET /api/auth/signin => display page signin
GET /api/auth/providers => display page list các OAuth services
GET /api/auth/signout => display page signout
GET /api/auth/csrf => lấy csrf token để cho vào form
POST /api/auth/signout => signout, phải có csrftoken từ /api/auth/csrf. Hàm signOut tự động hết
GET /api/auth/session => lấy client session object
POST /api/auth/signin/:provider => khởi động sign-in flow tùy providers, phải có csrf token. Hàm signIn tự động hết, trừ khi muốn custom
GET/POST /api/auth/callback/:provider => route này xử lý redirect từ provider khi sign in theo docs RFC



