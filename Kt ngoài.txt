# File mdx
Kết hợp của markdown và jsx, có thể viết component jsx trong markdown. 
Vào github sẽ k thấy mà phải dùng compiler riêng.
Nextjs hỗ trợ mdx, có thể viết toàn page bằng mdx rồi hiển thị như component JSX. Page đơn giản có thể dùng mdx ok vì bị giới hạn tính năng, pages phức tạp thì dùng jsx bth.



# CSR SSG SSR static web và hosting
CSR: browser gửi request lấy htm -> render tạm loading -> download JS -> fetch data API -> render với data đủ
SSR: browser gửi request lấy html -> page hiện luôn nhưng không tương tác được -> download JS event file -> thực hiện được actions
SSG thì fetch data lưu vào cache rồi build ra html tĩnh, cache stale thì nó tự fetch tiếp và build lại html tĩnh.
NextJS mặc định là Universal SSR tốt nhất vì CSR data realtime, SSR data cần SEO.
=> ***SSR có nhiều điểm lợi hơn CSR. Vd API dùng cookies httponly cản k truy cập từ FE thì server của SSR lại call đc. Vd biến môi trường secret ở client cần che giấu thì phải dùng SSR mới ẩn được
=> Các trang web có thể hosting CSR cũng như các file tĩnh. Còn hosting SSR hay SSG đều cần hosting 1 server nodejs lên serve file.



# Typescript trong NextJS
Tích hợp được typescript vào nextjs có sẵn bằng cách thêm tsconfig.json và sửa các file js.
ReturnType tạo ra 1 type mới là type trả về của function. VD: type T1 = ReturnType<(s: string) => void>; => T1 có type là void.
VD: type T2 = ReturnType<<T>() => T>; => T2 có type T
VD: declare function f1(): { a: number; b: string }; type T4 = ReturnType<typeof f1>; => thì type T4 = { a: number; b: string; }



# Feature flag
Không chỉ là FE, feature flag khi tắt hay bật thì toàn bộ tính năng liên quan, query db, api sẽ k còn khả dụng. Thường dùng khi: 
- Kill switch bật tắt 1 tính năng, chuyển đổi version của 1 tính năng nếu ngừoi dùng muốn.
- Beta testing, set cho 1 vài ngừoi dùng trong whitelist được phép truy cập beta version của sản phẩm. Hoặc cho 10% users hiện tại truy cập vào beta.
Tuỳ tình huống mà feature flag khác nhau như true/false, userroles nào, bao nhiêu phần trăm, whitelist những user nào.
VD: ta code 1 câu query mới thay cho câu query cũ nhưng không biết chắc chắn đúng hay không, ta vẫn chạy query cũ và feature flag chỉ enable ở môi trường test để chạy cả query mới rồi check kết quả 2 loại query giống thì bỏ qua, khác nhau thì log thông báo để dev vào check lỗi. Khi ok hết r thì xoá code, thay thành query mới là xong.
Cũng có thể code 1 feature và lưu flag trong db là false, trong code check flag và nếu flag k set thì tự lấy là true. Khi feature hoàn thiện thì set luôn là true hoặc xoá setting đó luôn.

Cơ chế cũng chỉ là cho vào 1 function check trả true hay false để enable feature hay không.
VD để check random 25% user được phép sử dụng feature mới, ta dùng: return randomhash(`${featurename}-{userid}`) / MAX_VALUE_HASH < 0.25 == true;

-> Feature flag có thể lưu ở trong settings của code nhưng mỗi khi đổi sẽ cần deploy lại. 
Cách tốt hơn là lưu ở file settings trong blob storage hoặc trong db, hoặc lưu lên bên thứ 3 để biết feature có enable hay k mà k cần deploy lại.

Để đổi feature flag, có thể vào code đổi file settings, hoặc đổi trong db. Với ứng dụng mà customer admin có thể đổi thì phải xây giao diện và cho customer đổi feature flag qua API.
Trong FE chỉ cần tạo component wrap lại và check env var thôi, trong BE dự án lớn sẽ rất phức tạp khi nhiều feature call api phụ thuộc lẫn nhau sẽ phải cô lập các feature ra riêng và chỉ call vào feature khác khi flag enable.



# Hiểu OAuth và OAuth2 cho web
-> Luồng hoạt động của OAuth 1.0 cho ứng dụng web
- Web (Consumer) đk với nhà cung cấp dịch vụ (VD: Twitter) để nhận Consumer Key và Consumer Secret.
- Web gửi yêu cầu lấy Request Token đến nhà cung cấp dịch vụ. Nó chứa CallbackURL là nơi nhận phản hồi sau khi uỷ quyền, yêu cầu cũng được ký số bằng Consumer Secret.
Web chuyển hướng người dùng đến trang ủy quyền của nhà cung cấp dịch vụ và để login và đồng ý cấp quyền truy cập cho web.
Nhà cung cấp dịch vụ sẽ trả về callback url oauth_token (Request Token), oauth_token_secret (bí mật liên quan đến token) tới callbackurl.
- Web gửi Request Token đã được ủy quyền đến nhà cung cấp dịch vụ để đổi lấy Access Token. Yêu cầu này cũng phải được ký số.
- Web dùng Access Token để truy cập tài nguyên từ nhà cung cấp dịch vụ. Mỗi request đều phải được ký số bằng Consumer Secret và oauth_token_secret
=> Bất tiện vì luôn phải ký số mọi request. K cần https luôn vì ký số luôn an toàn. K còn dùng nữa, bh mặc định chỉ dùng OAuth2.

-> Luồng hoạt động của OAuth 2.0 cho ứng dụng web: có nhiều luồng nhưng web chỉ dùng Authorization Code Flow
- Web đăng ký với nhà cung cấp dịch vụ (VD: Google) để nhận Client ID(định danh ứng dụng) và Client Secret.
- Khi login, web chuyển hướng người dùng đến trang ủy quyền của nhà cung cấp dịch vụ. 
Yêu cầu đó chứa Client ID và RedirectURL, Scope (Phạm vi quyền mà web yêu cầu), Response Type luôn là code (để nhận Authorization Code).
User login và đồng ý cấp quyền truy cập cho ứng dụng. Nhà cung cấp dịch vụ chuyển hướng về RedirectURL kèm Authorization Code trong url.
- Web gửi Authorization Code đến nhà cung cấp dịch vụ để đổi lấy Access Token. 
Yêu cầu gồm Client ID và Client Secret để xác thực ứng dụng, Authorization Code nhận được từ bước trước, Redirect URI phải khớp với URI đã đăng ký.
Nhà cung cấp dịch vụ trả về Access Token (và có thể cả Refresh Token) cho web.
Khi Access Token hết hạn, ứng dụng web có thể sử dụng Refresh Token để yêu cầu Access Token mới mà không cần người dùng đăng nhập lại.
=> Để làm thủ công, chỉ cần tạo các api url cho server xử lý tương tác với google là được, thì next-auth tạo sẵn các url đó cho ta r cung các callbacks để ta custom các qtr đó.



# Request waterfalls
Là khi để load 1 files, phải load 1 file khác dùng bên trong trước. VD:
|-> Markup
  |-> CSS
  |-> JS
    |-> CSS
      |-> Image
  |-> Image
VD client side:
|-> Markup (without content)
  |-> JS
    |-> Query
VD server side: 
|-> Markup (with content AND initial data)
  |-> JS

-> dehydrate là quá trình server loại bỏ data k cần thiết để giảm kích thước và gửi html cho client
hydrate là qtr client nhận được html rồi thì ghép sự kiện vào DOM và thực thi JS để tương tác được thôi



# Rich result
Web chứa rich result sẽ được google crawl thêm các thông tin như: phụ lục, thông tin sản phẩm, sao review, FAQ
Chỉ cần thêm data vào tag <script type="application/ld+json">
Web để test: https://search.google.com/test/rich-results
VD chỉ cần thêm thẻ này vào header:
<script type="application/ld+json">
{
  "@context": "https://schema.org",
  "@type": "Product",
  "name": "Điện thoại XYZ",
  "image": "https://example.com/xyz.jpg",
  "description": "Điện thoại XYZ có màn hình 6.5 inch, pin 5000mAh, camera 64MP.",
  "brand": {
    "@type": "Brand",
    "name": "XYZ"
  },
  "aggregateRating": {
    "@type": "AggregateRating",
    "ratingValue": "4.7",
    "reviewCount": "152"
  },
  "offers": {
    "@type": "Offer",
    "priceCurrency": "VND",
    "price": "15990000",
    "availability": "https://schema.org/InStock",
    "url": "https://example.com/dien-thoai-xyz"
  }
}
</script>



# (xoá ngay) Bug cũ nextjs 
-> Call api tới external source ở server pages sẽ bị gọi 2 lần, nếu udpate db sau đó cũng sẽ update 2 lần. 
Để fix, hoặc là dùng prefetch={true} thì khi xuất hiện ở view port sẽ tự prefetch chỉ 1 lần k sợ lặp. Hoặc là dùng router.push() thay cho thẻ Link

-> 1 bug nữa next14 là client side router cache vẫn tự cache với page.tsx dù trong docs nói là ta phải tự enable. Điều này khiến cho client tự cache k chịu gọi lại API fetch ở server. Mà éo có option opt out nó, buộc phải set staleTime trong next.config ép = 0 để opt out.

-> VD để đạt được getServerSideProps như page router, ta phải disable data cache và full route cache và client side cache trong app router rất dở. 
Tức thêm cache:"no-store" để opt out data cache và full router cache, và thêm staleTime dynamic 0 vào config để opt out client side router cache. Lại còn k được dùng thẻ Link để tránh lỗi nữa.



# Other
-> Hook useFormState => deprecated thay bằng useActionState
const [formState, formAction] = useFormState(addToCart, { itemID: "" });
async function addToCart(prevState, queryData) { const itemID = queryData.get('itemID'); return { itemID }; }
<form action={formAction}>
Khi form thực hiện submit sẽ chạy hàm addToCard, hàm này trả ra giá trị lấy với formState. Lúc chưa thực hiện mang giá trị mặc định là {itemID:""}
Ở lần gọi sau thì prevState mang giá trị formState trả ra ở lần gọi trước đó
Có thể custom xử lý lỗi trả ra formState.pending, formState.error, formState.itemID.
=> useFormStatus lấy form status ở từng component, còn useFormState lấy status thực hiện action ở component ngoài cùng (server component fetch loading thì dùng Suspense)


