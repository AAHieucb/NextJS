# File mdx
Kết hợp của markdown và jsx, có thể viết component jsx trong markdown. 
Vào github sẽ k thấy mà phải dùng compiler riêng.
Nextjs hỗ trợ mdx, có thể viết toàn page bằng mdx rồi hiển thị như component JSX. Page đơn giản có thể dùng mdx ok vì bị giới hạn tính năng, pages phức tạp thì dùng jsx bth.



# CSR SSG SSR hosting hydrate resumability và static web
CSR: browser gửi request lấy htm -> render tạm loading -> download JS -> fetch data API -> render với data đủ
SSR: browser gửi request lấy html -> server fetch data r gửi lại html -> page hiện luôn nhưng không tương tác được -> download JS event file -> thực hiện được actions
SSG thì server fetch data lưu vào cache rồi build ra html tĩnh sẵn, cache stale thì nó tự fetch tiếp và build lại html tĩnh.
Universal SSR là két hợp của CSR data realtime, SSR data cần SEO.
=> Dùng nextjs SSR có nh điểm lợi k thể thay thế bằng CSR. BFF server khi api bên thứ 3 dùng cookies httponly cản k truy cập từ FE thì server của SSR lại call đc. Biến môi trường secret ở component cần che giấu thì phải dùng SSR mới ẩn được.

Hosting CSR cũng như các file tĩnh. Còn hosting SSR hay SSG đều cần hosting 1 server nodejs lên serve file.

-> Khi hydrate, client tải code JS và thực thi để biết có event nào gắn vào component nào. Việc này server đã làm rồi nhưng k gửi cho client được nên client phải hydrate lại.
Resumability là giải pháp thay thế hydration
- Server serialize thông tin "event nào gắn với component nào" gửi cho client k cần tính toán lại.
- Sử dụng lazy load, để khi user tương tác mới cần load thông tin event đó thôi. Khi trigger event, client biết sẵn nó cần event handler nào thì load về thực hiện luôn.
- Sử dụng 1 global event handler bắt mọi event, k cần chờ event gắn vào element mới chạy được nữa. Vì hydration lưu hết event handler vào bộ nhớ rất tốn, cách này chỉ cần 1 global handler, user tương tác event nào mới load event đó.
=> React k có resumability, Qwik* là framework thực hiện resumability có tốc độ vượt cả nextjs, được tích hợp sẵn nên chỉ cần dùng Qwik là có tốc độ nhanh => k dùng

-> SS: - Ở lần load đầu tiên, SSR nhanh hơn do server xử lý html gửi lại client nhìn được ngay. Còn CSR thì người dùng nhìn thấy thanh loading cho đến khi browser xử lý DOM xong.
- SSR thì mọi thao tác phải gửi tới server xử lý, render ra html mới. CSR thì lượng data load lần đầu khá nặng nhưng bù lại các lần sau sẽ xử lý cực nhanh do nó đã có hết trên client, k cần reload trang lại với mọi hành động.
- CSR có SEO kém vì crawl vào web chả có gì, khi chuyển trang thì các thẻ metadata lại k thay đổi. Google đã giải quyết vấn đề này của search engine bằng cách cho phép crawler chạy code JS nhưng k hoàn hảo.



# Feature flag
Không chỉ là FE, feature flag khi tắt hay bật thì toàn bộ tính năng liên quan, query db, api sẽ k còn khả dụng. Thường dùng khi: 
- Kill switch bật tắt 1 tính năng, chuyển đổi version của 1 tính năng nếu ngừoi dùng muốn.
- Beta testing, set cho 1 vài ngừoi dùng trong whitelist được phép truy cập beta version của sản phẩm. Hoặc cho 10% users hiện tại truy cập vào beta.
Tuỳ tình huống mà feature flag khác nhau như true/false, userroles nào, bao nhiêu phần trăm, whitelist những user nào.
VD: ta code 1 câu query mới thay cho câu query cũ nhưng không biết chắc chắn đúng hay không, ta vẫn chạy query cũ và feature flag chỉ enable ở môi trường test để chạy cả query mới rồi check kết quả 2 loại query giống thì bỏ qua, khác nhau thì log thông báo để dev vào check lỗi. Khi ok hết r thì xoá code, thay thành query mới là xong.
Cũng có thể code 1 feature và lưu flag trong db là false, trong code check flag và nếu flag k set thì tự lấy là true. Khi feature hoàn thiện thì set luôn là true hoặc xoá setting đó luôn.

Cơ chế cũng chỉ là cho vào 1 function check trả true hay false để enable feature hay không.
VD để check random 25% user được phép sử dụng feature mới, ta dùng: return randomhash(`${featurename}-{userid}`) / MAX_VALUE_HASH < 0.25 == true;

-> Feature flag có thể lưu ở trong settings của code nhưng mỗi khi đổi sẽ cần deploy lại. 
Cách tốt hơn là lưu ở file settings trong blob storage hoặc trong db, hoặc lưu lên bên thứ 3 để biết feature có enable hay k mà k cần deploy lại.

Để đổi feature flag, có thể vào code đổi file settings, hoặc đổi trong db. Với ứng dụng mà customer admin có thể đổi thì phải xây giao diện và cho customer đổi feature flag qua API.
Trong FE chỉ cần tạo component wrap lại và check env var thôi, trong BE dự án lớn sẽ rất phức tạp khi nhiều feature call api phụ thuộc lẫn nhau sẽ phải cô lập các feature ra riêng và chỉ call vào feature khác khi flag enable.



# Request waterfalls
Là khi để load 1 files, phải load 1 file khác dùng bên trong trước. VD:
|-> Markup
  |-> CSS
  |-> JS
    |-> CSS
      |-> Image
  |-> Image
VD client side:
|-> Markup (without content)
  |-> JS
    |-> Query
VD server side: 
|-> Markup (with content AND initial data)
  |-> JS

-> dehydrate là quá trình server loại bỏ data k cần thiết để giảm kích thước và gửi html cho client
hydrate là qtr client nhận được html rồi thì ghép sự kiện vào DOM và thực thi JS để tương tác được thôi



# Rich result
Web chứa rich result sẽ được google crawl thêm các thông tin như: phụ lục, thông tin sản phẩm, sao review, FAQ
Chỉ cần thêm data vào tag <script type="application/ld+json">
Web để test: https://search.google.com/test/rich-results
VD chỉ cần thêm thẻ này vào header:
<script type="application/ld+json">
{
  "@context": "https://schema.org",
  "@type": "Product",
  "name": "Điện thoại XYZ",
  "image": "https://example.com/xyz.jpg",
  "description": "Điện thoại XYZ có màn hình 6.5 inch, pin 5000mAh, camera 64MP.",
  "brand": {
    "@type": "Brand",
    "name": "XYZ"
  },
  "aggregateRating": {
    "@type": "AggregateRating",
    "ratingValue": "4.7",
    "reviewCount": "152"
  },
  "offers": {
    "@type": "Offer",
    "priceCurrency": "VND",
    "price": "15990000",
    "availability": "https://schema.org/InStock",
    "url": "https://example.com/dien-thoai-xyz"
  }
}
</script>



# Other
-> Hook useFormState => deprecated thay bằng useActionState
const [formState, formAction] = useFormState(addToCart, { itemID: "" });
async function addToCart(prevState, queryData) { const itemID = queryData.get('itemID'); return { itemID }; }
<form action={formAction}>
Khi form thực hiện submit sẽ chạy hàm addToCard, hàm này trả ra giá trị lấy với formState. Lúc chưa thực hiện mang giá trị mặc định là {itemID:""}
Ở lần gọi sau thì prevState mang giá trị formState trả ra ở lần gọi trước đó
Có thể custom xử lý lỗi trả ra formState.pending, formState.error, formState.itemID.
=> useFormStatus lấy form status ở từng component, còn useFormState lấy status thực hiện action ở component ngoài cùng (server component fetch loading thì dùng Suspense)

-> Có thể tích hợp được typescript vào nextjs có sẵn bằng cách thêm tsconfig.json và sửa các file js.

-> Dừng: