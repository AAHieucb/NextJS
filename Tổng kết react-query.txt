react-query v5



# Hook basic
-> useQuery useQueries

-> useMutation giúp call post delete api, rồi đổi data trong cache của react-query trực tiếp.
useMutationState có thể dùng ở bất cứ components nào để lấy lấy data từ mọi mutation kèm select và filters ở bất cứ nơi nào khác.

URL: https://tanstack.com/query/v4/docs/framework/react/guides/optimistic-updates => dùng onMutate cho optimistics update rồi onError để revert data back.

-> const queryClient = useQueryClient(); // lấy instance truyền vào QueryClientProvider từ đầu
await queryClient.prefetchQuery('todos', fetchTodos); // gọi prefetch thủ công, gọi queryClient.prefetchQuery trong queryFn cũng ok
queryClient.setQueryData(['todos'], data); // set data trực tiếp

-> useSuspenseQuery y hệt useQuery nhưng thiếu vài options, nên ưu tiên dùng hơn nếu: 
- cần prefetch mọi query
- tận dụng được <Suspense> wrap component này sẽ chạy fallback khi query api đang thực thi



# react-query + nextjs server side
-> Page router:
- Khởi tạo _app.tsx:
// const queryClient = new QueryClient() => K tạo queryClient ở ngoài để tránh mọi request đều dùng chung
export default function MyApp({ Component, pageProps }) {
  const [queryClient] = React.useState(() => new QueryClient());
  return (
    <QueryClientProvider client={queryClient}> => wrap cả ứng dụng
      <Component {...pageProps} />
    </QueryClientProvider>
  )
}
- VD lỗi server side của react-query: server getServerSideProps call api getPosts(), client lại call api getPosts() bằng react-query, trường initialData lấy từ getServerSideProps
Sai vì đáng lẽ api chỉ nên call 1 lần. 
Nếu useQuery getPosts được dùng ở nhiều component con, cũng phải truyền initialData tới từng con bị ngu.
Giả sử navigate qua lại và getServerSideProps có giá trị mới, update vào initialData nhưng react-query vẫn k call lại api vì cache nên sai.

=> Fix: server call api thì các client component nên dùng luôn coi như đã call lần đầu tiên mà k cần fetch lại. 
Cơ chế react-query hỗ trợ sẵn là tạo biến queryClient mới ở phía server call api, rồi dehydrate cả biến đó truyền cho client hydrate lại merge với queryClient ở phía client. Client cũng cần set staleTime default > 0 để vào phát coi là đã fetch lần đầu rồi, k bị stale call lại luôn.
VD: 
export async function getStaticProps() {
  const queryClient = new QueryClient()
  await queryClient.fetchQuery({ queryKey: ['posts'], queryFn: getPosts }); // Nên luôn dùng server để prefetch, tức dùng prefetchQuery thay vì fetchQuery
  return {
    props: {
      dehydratedState: dehydrate(queryClient),
    },
  }
}
function Posts() {
  const { data } = useQuery({ queryKey: ['posts'], queryFn: getPosts }); // Dùng ở mọi component con cũng coi là có data lần đầu tiên rồi.
  ...
}
export default function PostsRoute({ dehydratedState }) {
  return (
    <HydrationBoundary state={dehydratedState}> => react-query cung sẵn để hydrate biến queryClient nhận được từ server
      <Posts />
    </HydrationBoundary>
  )
}

#### 
Quy trình:
Đầu tiên chạy loader function là các hàm được gọi bởi server trước khi render như getServerSideProps
Sau đó là server rendering process tạo html bằng cách chạy lại component tree từ node gốc, bao gồm mọi useState khởi tạo giá trị default, merge với data từ getServerSideProps
Sau đó là client rendering process nhận html từ server và merge với state mới nhất có ở client, hydrate data

Bản chất: Qtr dehydrate diễn ra trong cả loader function và SR process. Code như trên là tương tác với loader function, SR process tự động ta k can thiệp. 
Tức là nó dùng 3 biến queryClient, 1 trong loader function để prefetch, 1 trong server tạo mới khi chạy từ node gốc gặp new QueryClient trong useState, 1 phía client. 
Loader chạy lấy queryClient dehydrate. SR process render html ốp data từ queryClient vào trực tiếp. Gửi tới client lấy html hydrate ra thì giống hệt với html từ server, sau đó ốp các biến mới nhất vào html và thấy trên màn hình.
####

- Tối ưu hơn băng cách nhét 1 lần ngoài cùng thay vì component nào cũng phải thêm HydrationBoundary khi cần:
<QueryClientProvider client={queryClient}>
  <HydrationBoundary state={pageProps.dehydratedState}>
    <Component {...pageProps} />
  </HydrationBoundary>
</QueryClientProvider>

- dehydrate chỉ include query thành công. Query failed coi như k có thì server render loading, data được fetch ở client lại như bth.
Nếu vẫn muốn bắt lỗi để call api khác sẽ phải dùng fetchQuery thay vì prefetchQuery
try {
  result = await queryClient.fetchQuery(...)
} catch (error) { }
Hoặc nếu chấp nhận error là kết quả để k cần fetch lại ở client nữa thì override shouldDehydrateQuery
dehydrate(queryClient, {
  shouldDehydrateQuery: (query) => {
    // Mọi query kể cả query throw error.
    return true;
  },
})

-> App router: giống page router, vẫn tạo queryClient mới ở server mỗi khi gọi, fetchQuery ở loader function r truyền vào server thôi

URL code mẫu: https://tanstack.com/query/latest/docs/framework/react/guides/advanced-ssr 
- Lỗi độc nhất, ở lần render đầu tiên nếu component trong Provider suspend mà k có <Suspense> kẹp giữa nó và provider, thì component hiện tại bị rerender sẽ xoá hết data trong useState. Do đó k được dùng useState lưu biến queryClient, mà phải tự implement đã có instance thì k tạo mới nữa, chưa có thì tạo mới.
- Tạo queryClient viết ở Provider ngoài cùng để server luôn chạy qua nó đầu tiên. Ta có thể coi toàn bộ phần thực thi trong Server Component trước hàm return chính là loader của app router, nó luôn chạy từ node trên cùng xuống.
- Buộc phải có <HydrationBoundary> ở mọi route, k chỉ để 1 cái ở cấp ngoài cùng được. HydrationBoundary dùng nested với nested components ok.
- Dùng const getQueryClient = cache(() => new QueryClient()); để dùng 1 instance duy nhất ở server ok vì cache của react có vòng đời trong 1 request thôi. Ở mỗi component sẽ đều serialized lại toàn bộ gây overhead nếu nhiều data => bỏ k dùng
- Fetch react-query ở server thì k được render nó ở server, vì khi dùng ở client nếu cần revalidate thì server client sẽ conflict nhau.

- Dùng server để prefetch khiến api bị lâu, k muốn Suspense của server chờ lâu thì có thể bỏ await trước queryClient.prefetchQuery, đồng thời thêm options cho phép dehydrate pending query khi tạo queryClient. Khi đó sẽ k chờ ở server, k bị block Suspense server component nữa => luôn dùng
Tức là nó dehydrate luôn Promise chứ k chờ kết quả Promise xong. Client dùng useQuery sẽ lấy được nó nhưng phải xử lý pending status vì có thể lúc client nhận được thì nó chưa prefetch xong. Hoặc dùng useSuspenseQuery sẽ hiện fallback của Suspense bao ngoài client side comp nếu chưa prefetch xong.
Có thể custom quá trình serialize và deserialize nếu data fetch về kp json.
=> Bản chất là Nextjs tự động stream từng phần của app gửi cho client và hiển thị lên browser liên tục. Khi call api ở server từ pending thành success cũng v, khi success rồi cũng stream từng phần kết quả lên. Ở đây, server gửi phần HTML trước rồi tiếp tục stream dữ liệu khi API hoàn tất.

- Bản chất việc dùng QueryClientProviders trực tiếp trong server component, hoặc nhét vào component Providers export ra rất khác nhau:
Dùng QueryClientProviders trực tiếp trong server component bị sai vì queryClient cũng được tạo ở phía client. Truyền vào QueryClientProviders cũng sai luôn vì nextjs chỉ cho pass object thuần serialize được từ server sang component chứ k cho pass kiểu queryClient phức tạp, nó buộc phải làm ở client.
Ta config cho cả server và client biến queryClient thì cách tốt nhất là gom export ra 1 file riêng và import trong cả server component và client providers. Phía client phải tạo componnent Providers và import chứ k dùng QueryClientProviders trực tiếp trong server component layout.js

- Điều đb là có tới 3 instance queryClient được sinh ra: 1 là global instance trong client comp, 2 là khi server comp chạy lần đầu tiên fetch data, 3 là khi server chạy qua mọi client component trong first rendering pass.
VD khi setup app/get-query-client.ts:
function makeQueryClient() {
  return new QueryClient({
    defaultOptions: {
      queries: {
        staleTime: 60 * 1000,
      },
      dehydrate: {
        shouldDehydrateQuery: (query) =>
          defaultShouldDehydrateQuery(query) ||
          query.state.status === 'pending',
      },
    },
  })
}
let browserQueryClient: QueryClient | undefined = undefined;
export function getQueryClient() {
  if (isServer) { // Server fetch thì tạo mới
    return makeQueryClient()
  } else { // instance global của client; server chạy qua mọi client comp trong first rendering pass cũng tạo nếu chưa có.
    if (!browserQueryClient) browserQueryClient = makeQueryClient()
    return browserQueryClient
  }
}
Sau đó prefetch ở server:
// app/posts/page.tsx
export default function PostsPage() {
  const queryClient = getQueryClient()
  queryClient.prefetchQuery({
    queryKey: ['posts'],
    queryFn: getPosts,
  })
  return (
    <HydrationBoundary state={dehydrate(queryClient)}>
      <Posts />
    </HydrationBoundary>
  )
}
Rồi lấy ở client:
// app/posts/posts.tsx
'use client'
export default function Posts() {
  const { data } = useSuspenseQuery({ queryKey: ['posts'], queryFn: getPosts })
  // ...
}

- Còn có lib @tanstack/react-query-next-experimental giúp query data ở server trong client component tự động stream chỉ bằng cách call useSuspenseQuery
URL: https://tanstack.com/query/latest/docs/framework/react/guides/advanced-ssr#experimental-streaming-without-prefetching-in-nextjs

####
***Bản chất: Khi cần fetch api hiển thị ra UI, tại sao lại nghĩ đến việc prefetch ở server component rồi mới gửi cho client thay vì fetch ở client bth chứ? 
Thực tế nếu prefetch ở server, nó giúp cho SEO. Nhưng nếu prefetch mà chơi kiểu streaming, nó sẽ k có ích gì vì gg crawler nhận Promise render ra fallback của Suspense k có nghĩa, khi đó điểm lợi duy nhất là tốc độ sẽ nhanh hơn khi query được gọi ngay khi server render html chứ k chờ về client mới gọi.
=> Luôn dùng 2 cách này thay vì call bth ở client.

- Bản chất cái này là lần đầu tiên hiện ra thì prefetch ở server và truyền vào client. Nếu ấn 1 button gọi api thì chỉ là ở client thì react-query như bth thôi. 
- Server actions và route handler đều không thể dùng react-query bên trong, vì khác với server component, nó k có loader, k có chạy khởi tạo queryClient từ node gốc của component tree đổ đi, k có Provider mà chỉ xử lý logic ở server thôi. Nhưng có thể dùng react-query ở client với queryFunction gọi vào server action và route handler thì ok.
- queryClient ở server được tạo lại liên tục và k đồng bộ với client, khi server gọi cũng kb gì về client. Qtr là queryClient tạo mới ở server sẽ luôn call lại api, navigate sang page khác r quay lại sẽ call lại queryFn mà kqt staleTime. 
Tức queryFn thì luôn chạy nhưng có thể kiểm soát việc call lại api bằng fetch force-cache có sẵn của nextjs, chứ các kiểu fetch khác sẽ k hỗ trợ.

=> Nhưng vấn đề là chỉ dùng server để prefetch thôi chứ staleTime kqt sao, k có usecase sử dụng? 
Nếu chỉ muốn gọi duy nhất 1 lần khi vào và k gọi lại bất cứ lần nào ở client nữa thì chả cần dùng react-query, chỉ cần fetch force-cache ở server thôi. 
Nếu muốn ssr realtime thì server luôn call lại và client refetch khi cần thiết là ok. 
Nếu muốn server call 1 lần đầu tiên, rồi mọi lần sau chỉ client gọi khi stale thì k ổn. Vì ta muốn client refetch thì server cũng phải refetch data mới nhất. Mà server k thể biết bất cứ thứ gì của react-query phía client. Giải pháp là phía client thay đổi gì đó khiến server cần call lại api ở lần fetch sau thì dùng revalidateTag revalidatePath để lần sau visit sẽ refetch => *** Hình như éo đúng, server luôn tạo mới react-query nên luôn fetch lại khi vào chứ.
=> Để tránh hiểu nhầm các thứ, tốt nhất là chỉ dùng khi cần realtime SSR, server luôn call lại api mọi lần khi vào page.
####


