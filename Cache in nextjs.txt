# Tổng quan caching trong App Router
NextJS luôn tự cache nhiều nhất có thể để tối ưu mà k ảnh hưởng tới luồng hoạt động bình thường. Ta custom tắt đi hay không thôi.
VD client request tới server có Router Cache ở ngay client để k gọi 1 request nhiều lần, gọi tới server nextjs lại có Full Route Cache có sẵn html từ request trước đó không, nếu không thì server side sẽ call api để lấy data vào html thì lại có Request Memoization lưu kết quả của hàm gọi api và Data Cache lưu JSON data của API.
Hàng loạt example: https://nextjs.org/docs/app/building-your-application/data-fetching/fetching

Cache trong nextjs lưu trong filesystem của server. Có thể config cache location sang storage bền vững or chia sẻ giữa các container và nhiều instance trên máy.

=> ***Chốt: Nếu dùng fetch force-cache hoặc query db sẽ luôn cache từ build time (pre-rendering) khiến lần sau k gọi lại. Nếu muốn luôn call lại thì dùng options no-store (hoặc để mặc định cx v) cho fetch, hoặc export "force-dynamic"
Nếu dùng dynamic api thì cũng luôn luôn call lại, tức dùng: cookies, headers, connection, draftMode, searchParams prop, unstable_noStore => chỉ cần lấy thôi cx call dynamic lại. Chú ý ở mỗi page để tránh tự động pre-rendering ở build time.



# Browser có sẵn cache
Browser tự cache request theo trường Cache-Control trong response header.
VD set là max-age=10 sẽ cache trong 10s. Điều này thường gặp trong static file css js img. 
Bản chất khi disable cache hoặc ép browser reload lại với k dùng cache thì sẽ chỉnh sửa header và đè lên setting của server nextjs vì server nextjs cũng theo config đó. => Thực tế k cần qt, vì request bth ta luôn để fetch lại chứ k dùng cache browser, chỉ static file mới cache thôi.

-> Nextjs tự thêm Cache-Control cho truly immutable assets là "public, max-age=31536000, immutable", bao gồm static image và điều này k thể đổi, cx k cần đổi.
Riêng với image, có thể config minimumCacheTTL, deviceSizes, imageSizes, formats. 
Khi có cả 2 minimumCacheTTL và Cache-Control sẽ chọn cái có time lớn hơn, nên k thể ép thời gian cache image nhỏ hơn setting fix của Cache-Control được
Các page dynamic cũng tự set Cache-Control cho browser là "private, no-cache, no-store, max-age=0, must-revalidate" để cản mọi cache

=>*** Chốt: cái này k cần đụng, mặc định cache các file assets static kệ nó thôi.



# Request Memoization
Fetch của NextJS tự động cache request call trong 1 single render pass ở server side.
Vd call API bằng fetch của nextjs như Promise.all([fetchData(), fetchData()]) tới server sẽ thấy chỉ gọi 1 lần.
=> Chú ý là chỉ ở server side nextjs, còn client side thì vẫn request lại nhiều lần, phải tự custom xử lý mới fix deduplicate phía client được.
=> Cơ chế nó lưu lại request vào cache trong 1 single render pass, hết render pass đó thì xoá cache đi. Nên luôn dùng.

Chỉ cần dùng fetch có sẵn của nextjs là tự có request memoization r. Thực tế đây là tính năng của React có sẵn cache dùng cho server component. NextJS chỉ override lại hàm fetch với nó. Nếu gọi db, CMS client, GraphQL k dùng được fetch thì tự dùng cache của React để có Request Memoization. Cache của react chỉ request memoize chứ k cache data, chú ý là cache này nằm phía server.
VD: import { cache } from 'react'; const fetchWithCache = cache( async (url) => { const res = await fetch(url); return res.json(); }); => nextjs dùng v ok luôn

Trong nextjs còn có { unstable_cache } hỗ trợ request memoization và mặc định nó cache mãi luôn, y hệt "force-cache" => éo bh dùng.
Ta có thể tự implement hook useFetch để fetch data kèm xử lý loading, error, lưu lại request trong useRef hay useMemo coi như là cache nhưng kp là request memoization
Nếu dùng các thư viện như swr, react-query cũng giúp tạo Request Memoization tự cache request, xử lý deduplicate trong ktg ngắn.

=>*** Chốt: cứ dùng fetch GET tự có request memoization cho 1 single render pass r, với kiểu khác thì tự wrap bằng cache của react là xong.



# Data Cache
Thứ tự: Client Side Cache HTML -> Full Router Cache HTML -> Data Cache API
Server nextjs check Request Memoization chưa từng gọi trong render pass này thì check tiếp trong Data Cache. Data cache cản call lại 1 API nếu đã từng call ở server => Request Memoization chỉ xét tới 1 lần render, còn Data Cache xét toàn bộ dự án ở phía server
Hàm fetch của nextjs chỉ được gọi ở server và thêm các tính năng cache như này, còn client component mà fetch sẽ dùng hàm standard của browser.

Mặc định fetch k có cache tức cache:"no-store", phải tự thêm vào nếu cần cache:"force-cache", or thêm {next:{revalidate:30}} sẽ như SSG. 
Còn Cache-Control header sẽ quản lý browser cache, cache này sẽ override cache của hàm fetch nextjs. VD disable cache và reload trên browser sẽ luôn call lại ở server.
Mặc định Cache-Control dùng cho static file, còn lại luôn dynamic nên ta kqt, chỉ cần qt hàm options hàm fetch:
fetch('https://...', { cache: "no-store }) => luôn fetch lại => default behavior
fetch('https://...', { cache: "force-cache" }) => luôn cache
fetch('https://...', { next: { revalidate: 3600 } }) => time-based revalidate
fetch(`https://...`, { next: { tags: ['a', 'b', 'c'] } }) và revalidateTag('a') => revalidate cache chứa tag cụ thể
revalidatePath('/') => trigger revalidate bất cứ lúc nào cho 1 path cụ thể

export const fetchCache = 'default-cache' => khiến mọi fetch request ở page đó default đều được cached, nếu k muốn catch buộc phải thêm no-store
export const dynamic='force-dynamic' => khiến mọi request đều call lại = default = { cache: 'no-store' } = { next: { revalidate: 0 } }

-> Mặc định là opt out, có thể revalidate or opt in như trên
Cách khác là dùng các options export ra. Các options export quản lý cache: https://nextjs.org/docs/app/api-reference/file-conventions/route-segment-config
Hoặc gọi hàm: import { unstable_noStores } from "next/cache"; y hệt option cache:"no-store", có option revalidate luôn => thay bằng connection r
=> Tức có 3 cách

VD partial rendering: nextjs tự chia ra các phần component static tự cache build time, component dynamc tự xây ở runtime, phần Suspense của component dynamic cũng là static được cache ở build time.

=>*** Chốt: chỉ cần qt các options của fetch, no-store SSG fetch lại liên tục, revalidate SSG fetch sau 1 ktg.



# Full Route Cache
Cache ở server, nếu page đã từng render html sẽ hiện luôn, cản server call api và render lại html. Data cache tương tự nhưng server vẫn render html lại.
Static routes luôn cache tự động lúc build và có luôn ở lần truy cập đầu tiên (hoặc khi revalidate), dynamic routes mà dùng cache sẽ k cache lúc build mà lần truy cập đầu mới cache.

-> Cơ chế: Thực tế, việc render được chia thành chunks là các phần routes khác nhau. Mỗi chunk qua 2 bước: render Server Components thành dạng "React Server Component Payload", rồi kết hợp pre-render Client Component để render ra html hoàn chỉnh trên server. 
Lưu ý phần React Server Component Payload (RSC payload) chứa kết quả đã xử lý rendered xong Server Component. 
HTML hoàn chỉnh từ server hiện ra ngay và k thể tương tác, vì server component chả có JS gì mà tương tác, còn client component thì chưa hydrate -> sau khi browser tải file js và hydrate client component xong thì tương tác được.

-> Để invalidate, ta invalidate cái Data Cache, sẽ tự invalidate Router Cache và Full Router Cache. 
Đặc biệt là khi redeploy tuy k invalidate Data Cache, nhưng sẽ invalidate Full Route Cache html.

Để opt out: opt out data cache cũng opt out full route cache.

=>*** Chốt: ta k cần qt vì nextjs tự tối ưu, nếu page có data cache thì data k đổi, thì RSC payload cũng k đổi thì Full Route Cache tự cache luôn r. Nch chỉ cần qt các options của fetch thôi.

Dùng data cache thì cũng dùng full route cache đi vì kết quả sẽ như nhau mà, k cần qt full route cache làm gì, chỉ cần biết có opt in/out data cache k thôi.
Thực tế React Server Component Payload cũng tự lưu ở Client-side Router Cache. Nó tự cache routes từng visited và prefetch future routes. Có request sẽ check từ Router Cache trước, k có mới tìm trong Full Route Cache ở server.



# Client-side Router Cache
Cache này sẽ cản client làm thêm bất cứ thứ gì, sẽ k gọi vào server nữa luôn. Chỉ có trong app router
App Router có cache này có thể khiến navigate giữa các page luôn tái sử dụng k fetch lại bh.
URL: https://nextjs.org/docs/app/api-reference/next-config-js/staleTimes

-> Mặc định tự cache server components layout.js và loading state trong loading.js giúp instant navigation. Bản chất là cache RSC payload ở client.
Mặc định page.js không cache, có thể tự set cache page.js với staleTimes trong config là nextConfig { experimental: { staleTimes: { dynamic 30 } } }

Chú ý cache này khác với bfcache có sẵn của browser. bfcache của browser khi navigate tiến lùi luôn tự cache page klq tới client side router cache. Ta kqt và cũng k lo  nó làm page cũ vì nó tự cache chuẩn.
Chú ý là nó cache file.js, chứ call api ở client vẫn call lại như bth khi vào page thôi.

-> Thời hạn cache: Client-side Router Cache tự mất khi refresh pages vì chỉ trong 1 session. 
page.js có thời gian cache theo nextConfig. Còn với layout và loading state chia 2 cases:
VD default prefetch={null} or kxđ thì k cache dynamic pages, 5m cho static pages.
VD prefetch={true} hoặc dùng router.prefetch thì 5m cho cả static và dynamic pages.
=> Nói chung là prefetch true thì cache cả dynamic và static, k set thì 5m cho static thôi. 

=> prefetch phải dùng cẩn thận vì nó gây ra nhiều behavior k tốt. Vd nó prefetch 1 route từ server, nhưng ta lại đổi data lúc vào pages thì server k fetch lại nữa là sai, phải đảm bảo page hiện tại k thay đổi data của page đang prefetch.

-> Để invalidate: dùng revalidatePath revalidateTag cho server action sẽ invalidate Router Cache ở client luôn
router.refresh phía client cũng invalidate Router Cache 

=>*** Chốt: Cache này chỉ cần chú ý prefetch thì đảm bảo page data ở page prefetch k đổi nhiều thôi. Còn page.js dynamic mà vẫn muốn cache thì chỉ khi kqtr realtime, thì set trong nextConfig.



# Trigger revalidate mọi thứ ngay lập tức
revalidatePath/revalidateTag sẽ invalidate mọi loại cache ở 1 url cụ thể, nó chỉ gọi ở server nên có thể nhét vào server actions or route handlers.
Muốn invalidate ở client thì call vào server action or route handler api, hoặc gọi router.refresh()



//!!!!!!!!
# Route Handlers
Route Handlers của App Router giống API Route của Page Router. Do là server nên set được mọi thứ như dynamic function, cookie, headers, cors, FormData, body, query. 
Route Handlers giúp tạo API BFF: https://nextjs.org/docs/app/building-your-application/routing/route-handlers
Request Memoization chỉ dùng cho GET trong React Component tree và k extends fetch request trong Route Handlers vì nó ngoài React Component tree tức nó dùng fetch bth của browser thôi.

Route Handlers mặc định k được cache. VD Có thể dùng export const dynamic='force-static' để luôn cache, export const revalidate=60 để revalidate với request GET. Mọi method khác luôn k được cache.
VD đang hiện 1 trường db lên UI có cache, external system gọi vào API của Route Handlers update trường đó, user refresh sẽ k thấy data mới nhất vì cache data cũ => thêm revalidateTag ngay trong Route Handlers để invalidate cache được khi update, kể cả thêm vào server actions

-> Pb: 
Routing: app/<>/pages.js
Route handler: app/api/route.js
Server actions: tuỳ biến bất cứ nơi nào khác. VD: server/api/post.js 





